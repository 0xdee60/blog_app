#crear carpeta
#crear gitignore
#crear requirements.txt
django==3.2.7

#instalar virtualenv
pip install virtualenv

#crear env
virtualenv env

#activar virtual env
cd env
cd Scripts
activate

#instalar requirements.txt
pip install -r requirements.txt

#crear proyecto django
django-admin startproject app_blog

#cambiar nombre de la carpeta principal a src(opcional)
#editar settings.py de nuestro proy para que acepte 
#archivos agregando 
STATIC_URL = '/static/'
MEDIA_URL = '/media/'
STATICFILES_DIRS=[os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'static_root')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media_root')

#incluir los statics en urls.py de nuestro proy
#importar librerias
from django.conf import settings
from django.conf.urls.static import static
#agregar el final el DEBUG
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL,document_root=settings.STATIC_ROOT)

#hacer migraciones
python manage.py makemigrations
python manage.py migrate

#crear el superusuario
python manage.py createsuperuser

#agregar bootstrap al proyecto 
#agregar el directorio de templates en TEMPLATES, DIRS dentro
#de settings.py de nuestro proyecto
'DIRS': [os.path.join(BASE_DIR,'templates')],
#crear carpeta templates dentro de la carpeta src
#crear archivo dentro de templates que sera la base
#con el nombre de base.html
#crear estructura html:5 en el archivo base.html
#importamos el css y js de bootstrap de su pag
    <!-- import bootstrap css en head debajo de title-->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <!-- Import bootstrap js en body -->
    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
#definir bloque en el que estaran nuestros html, en base.html
#en body antes del js de bootstrap
 {% block content %}
        
 {% endblock content %}

#crear aplicacion de post (publicaciones del blog)
python manage.py startapp posts
#agregar app posts a settings.py en INSTALLED_APPS
'posts',
#definir modelos en nuestra app posts
class Post(models.Model):
    title = models.CharField(max_length=255)
    content = models.TextField()
    thumbnail = models.ImageField()
    publish_date = models.DateTimeField(auto_now_add=True)
    last_update = models.DateTimeField(auto_now=True)
    #autor = models.ForeignKey()

    def __str__(self):
        return self.title
class Comment(models.Model):
    #user = models.ForeignKey()
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    timespan = models.DateTimeField(auto_now_add=True)
    content = models.TextField()

    def __str__(self) :
        return self.user.username

#definir cuantas vistas tendra el modelo mediante una clase
#en el archivo models.py de nuestra app
class PostView(models.Model):
    #user = models.ForeignKey()
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    timestamp = models.DateField(auto_now_add=True)

    def __str__(self):
        return self.user.username
#hacer migraciones
python manage.py makemigrations
python manage.py migrate

#agregamos modelos a la vista de admin en admin.py de nuestra app
from .models import Post, PostView, Like, Comment
admin.site.register(Post)
admin.site.register(PostView)
admin.site.register(Comment)
admin.site.register(Like)

#CREACION DE USUARIO
#instalar python allauth o agregar a requirements.txt
pip install django-allauth
#agregar authentication_backends en settings.py del proyecto
#al final
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',

    'allauth.account.auth_backends.AuthenticationBackend',
    
]
#agregar tambien los INSTALLED_APPS estas apps antes de nuetra app
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
#agregar luego de los backends en settings.py de nuestro proy 
SITE_ID = 1
#modificar urls.py del proy agregando a urlspatterns
#ademas importar include de django.urls
path('accounts/', include('allauth.urls')),
#correr migraciones
python manage.py makemigrations
python manage.py migrate
#configurar nuestro usuario de autentificaicon
#en nuesta app creamos el modelo importando AbstractUsers
from django.contrib.auth.models import AbstractUser
class User(AbstractUser):
    pass

    def __str__(self) -> str:
        return self.username
#especificar donde esta nuestro modelo de usuario
#en settings.py de nuestro proy
AUTH_USER_MODEL = 'posts.User'
#borrar carpeta migrations y archivo bd para volver a migrar
python manage.py makemigrations posts
python manage.py migrate

#volver a crear superusuario 
python manage.py createsuperuser
#agregar modelo de User en admin.py de nuestra app
#no olvides importar 
from .models import Post, PostView, Like, Comment, User
admin.site.register(User)


#VISTAS
#Se agregan las clases de las vistas en views.py de nuestra app
#importar las acciones que nesesitaremos usar y los modelos
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from .models import Comment,Post,Like,PostView
class PostListView(ListView): #recive como parametro lo que haremos
	model = Post
class PostListView(ListView): 
	model = Post
class PostDetailView(ListView): 
	model = Post
class PostCreateView(ListView): 
	model = Post
class PostUpdateView(ListView): 
	model = Post
class PostDeleteView(ListView): 
	model = Post
	seccess_url = '/'
#agregar en los urls.py de nuestro proy
from posts.views import (
	PostListView,
	PostDetailView,
	PostCreateView,
	PostUpdateView
	PostDeleteView
)
#agregar urlspatterns en urls.py de nuestro proy
path('',PostListView.as_view(),name='list')
path('create/',PostCreateView.as_view(),name='create')
path('<slug>/',PostDetailView.as_view(),name='detail')
path('<slug>/update/',PostUpdateView.as_view(),name='update')
path('<slug>/delete/',PostDeleteView.as_view(),name='delete')
#crear carpeta posts dentro de templates
#crear .htmls segun lo declarado dentro de templates/posts
#ej: post_list.html, post_create.html,etc
#heredar el formato definido en base.html
#ej: list.html
{% extends "base.html" %}
{% block content %}
    <!--Aca el codigo html o django-->
    <div class="container">
        {% for item in object_list%}
            {{item.title}}
        {% endfor %}
    </div>
{% endblock content %}
#para que funcione los slugs tenemos que modificar el modelo 
#en este caso dentro de Post
class Post(models.Model):
    title = models.CharField(max_length=255)
    content = models.TextField()
    thumbnail = models.ImageField()
    publish_date = models.DateTimeField(auto_now_add=True)
    last_update = models.DateTimeField(auto_now=True)
    autor = models.ForeignKey(User,on_delete=models.CASCADE)
    slug = models.SlugField()

    def __str__(self):
        return self.title
#volver a hacer migraciones
python manage.py makemigrations posts
  #si sale seleccionar dale a one-off 1 y anotar luego
  #"fix-me"
python manage.py migrate
#para poder usar update tenemos que especificar 
#los fields en la clase vista de update 
#que esta en views.py de nuestra app con los campos que
#se pueden actualizar
class PostUpdateView(ListView):
    model = Post
    fields = (
        'title',
        'content',
        'thumbnail',
        'author',
        'slug',
    )
class PostCreateView(CreateView):
    model = Post
    fields = (
        'title',
        'content',
        'thumbnail',
        'author',
        'slug',
    )
#agregamos el template que nos pide al correr el servidor
#en el caso de update post_form
#probar urls para ver los html faltantes
#si pide post_form.html no ovlidar el enctype


#FORMULARIOS
#crear un archivo llamado forms.py dentro de nuestra app
#importar forms de django y modelos
from django import forms
from .models import Post
class PostForm(forms.ModelForm):
	class Meta:
		model = Post
		fields = ('__all__')
#modificar las vistas en views.py de nuestra app
#importando el formulario recien creado sin fields
from .forms import PostForm
class PostCreateView(CreateView):
    form_class = PostForm #agregar var con el formulario
    model = Post
    #tenemos que indicar a donde ir cuando de success
    success_url = '/'
    #tenemos que obtener los datos ingresados
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context.update({
            'view_type':'create'
        })
#para realizar un href
#debe agregaral modelo la funcion get_absolute_url
from django.shortcuts import reverse
def get_absolute_url(self):
    return reverse("detail",kwargs={
        'slug':self.slug
    }
#slicing en template 
{{ some_list|slice:":2" }}

#dar funcionalidad a boton de megusta
#en views.py del app importar get_object_or_404 de django.shortcuts
from django.shortcuts import render, get_object_or_404
def line(request, slug):
    post = get_object_or_404(Post, slug=slug)
    like_qs = Like.objects.filter(user = request.user, post = post)
    if like_qs.exists():
        like_qs[0].delete()
        return redirect('detail',slug=slug)
    Like.objects.create(user=request.user, post=post)
    return redirect('detail',slug=slug)
#importar funcion a urls.py del proy
from posts.views import (
    PostListView,
    PostDeleteView,
    PostDetailView,
    PostUpdateView,
    PostCreateView,
    Agregar_like
)
#agregar tmbien en urls patterns
 path('<slug>/Agregar_like',Agregar_like,name='like'),
#crear en modelo.py del app obtener un url ddespues de like
#dentro del modelo Post
    def get_like_url(self):
        return reverse("like", kwargs={
            'slug':self.slug
        })
#llamar dentro  del href
<span><a href="{{object.get_like_url}}">Likes: {{object.get_like_count}}</a></span>

#contar visitas en sitio editar views.py del app dentro
#del view que usaremos para contar definimos el metodo
def get_object(self, **kwargs):
        object = super().get_object(**kwargs)
        if self.request.user.is_authenticated:
            PostView.objects.get_or_create(user = self.request.user,post = object)
        return object

#Cometar post
#indicar que campos del formulario se desea editar dentro
#de forms.py de nuestra app
class CommentForm(forms.ModelForm):
    class Meta:
        model = Comment
        fields=('content',)
#agregamos la funcion post (request post no publicacion)
#en la vista que vayamos a comentar viws.py -> details
def post(self,*args,**kwargs):
        form = CommentForm(self.request.POST)
        if form.is_valid():
            post = self.get_object()
            comment = form.instance
            comment.user = self.request.user
            comment.post = post
            comment.save()
            return redirect("detail", slug=post.slug)
#obtenemos el form para mostrarlo en la view
def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context.update({
            'form' : CommentForm()
        })
        return context

#agregamos el formulario y la muetra de comments al template
  <h4>Escribe un comentario...</h4>
                <form method="POST" enctype="multipart/form-data">
                    {% csrf_token %}
                    {{form.as_p}}
                    <button type="submit">Comentar</button>
                </form>
    <h4>Comentarios...</h4>
    {% for comment in object.comments %}
        <div>
            <p>
                {{comment.content}}
                <br/>
                <small>Hace: {{comment.timestamp|timesince}}</small>
            </p>
        </div>
        <hr/>
    {% endfor %}




















